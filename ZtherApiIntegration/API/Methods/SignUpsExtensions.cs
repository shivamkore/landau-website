// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using ZtherApiIntegration.API;
using ZtherApiIntegration.API.Models;

namespace ZtherApiIntegration.API
{
    public static partial class SignUpsExtensions
    {
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ISignUps.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='model'>
        /// Required.
        /// </param>
        public static string CreateSignUps(this ISignUps operations, string brand, SignUp model)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISignUps)s).CreateSignUpsAsync(brand, model);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ISignUps.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='model'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> CreateSignUpsAsync(this ISignUps operations, string brand, SignUp model, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.CreateSignUpsWithOperationResponseAsync(brand, model, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ISignUps.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        public static SignUpList GetAllSignUps(this ISignUps operations, string brand)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISignUps)s).GetAllSignUpsAsync(brand);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ISignUps.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<SignUpList> GetAllSignUpsAsync(this ISignUps operations, string brand, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.SignUpList> result = await operations.GetAllSignUpsWithOperationResponseAsync(brand, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ISignUps.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static SignUp GetSignUpsById(this ISignUps operations, string brand, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISignUps)s).GetSignUpsByIdAsync(brand, id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ISignUps.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<SignUp> GetSignUpsByIdAsync(this ISignUps operations, string brand, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.SignUp> result = await operations.GetSignUpsByIdWithOperationResponseAsync(brand, id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ISignUps.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static string RemoveSignUps(this ISignUps operations, string brand, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISignUps)s).RemoveSignUpsAsync(brand, id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ISignUps.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> RemoveSignUpsAsync(this ISignUps operations, string brand, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.RemoveSignUpsWithOperationResponseAsync(brand, id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
