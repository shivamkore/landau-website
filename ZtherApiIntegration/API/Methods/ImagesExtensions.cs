// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using ZtherApiIntegration.API;

namespace ZtherApiIntegration.API
{
    public static partial class ImagesExtensions
    {
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        public static string GetCatalogBannerImage(this IImages operations, string filename)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IImages)s).GetCatalogBannerImageAsync(filename);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetCatalogBannerImageAsync(this IImages operations, string filename, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetCatalogBannerImageWithOperationResponseAsync(filename, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        public static string GetCatalogImage(this IImages operations, string filename)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IImages)s).GetCatalogImageAsync(filename);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetCatalogImageAsync(this IImages operations, string filename, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetCatalogImageWithOperationResponseAsync(filename, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        public static string GetCollectionImage(this IImages operations, string filename)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IImages)s).GetCollectionImageAsync(filename);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetCollectionImageAsync(this IImages operations, string filename, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetCollectionImageWithOperationResponseAsync(filename, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        public static string GetDetailImage(this IImages operations, string filename)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IImages)s).GetDetailImageAsync(filename);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetDetailImageAsync(this IImages operations, string filename, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetDetailImageWithOperationResponseAsync(filename, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        public static string GetLogoImage(this IImages operations, string filename)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IImages)s).GetLogoImageAsync(filename);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetLogoImageAsync(this IImages operations, string filename, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetLogoImageWithOperationResponseAsync(filename, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        public static string GetPrintBannerImage(this IImages operations, string filename)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IImages)s).GetPrintBannerImageAsync(filename);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetPrintBannerImageAsync(this IImages operations, string filename, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetPrintBannerImageWithOperationResponseAsync(filename, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        public static string GetPrintImage(this IImages operations, string filename)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IImages)s).GetPrintImageAsync(filename);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetPrintImageAsync(this IImages operations, string filename, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetPrintImageWithOperationResponseAsync(filename, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        public static string GetSeasonalImage(this IImages operations, string filename)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IImages)s).GetSeasonalImageAsync(filename);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetSeasonalImageAsync(this IImages operations, string filename, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetSeasonalImageWithOperationResponseAsync(filename, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        public static string GetSliderImage(this IImages operations, string filename)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IImages)s).GetSliderImageAsync(filename);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetSliderImageAsync(this IImages operations, string filename, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetSliderImageWithOperationResponseAsync(filename, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        public static string GetThumbnailImage(this IImages operations, string filename)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IImages)s).GetThumbnailImageAsync(filename);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetThumbnailImageAsync(this IImages operations, string filename, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetThumbnailImageWithOperationResponseAsync(filename, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        public static string GetTileImage(this IImages operations, string filename)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IImages)s).GetTileImageAsync(filename);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetTileImageAsync(this IImages operations, string filename, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetTileImageWithOperationResponseAsync(filename, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        public static string GetZoomImage(this IImages operations, string filename)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IImages)s).GetZoomImageAsync(filename);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IImages.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetZoomImageAsync(this IImages operations, string filename, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetZoomImageWithOperationResponseAsync(filename, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
