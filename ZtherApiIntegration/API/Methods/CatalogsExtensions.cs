// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using ZtherApiIntegration.API;
using ZtherApiIntegration.API.Models;

namespace ZtherApiIntegration.API
{
    public static partial class CatalogsExtensions
    {
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='gender'>
        /// Required.
        /// </param>
        public static CategoryList GetAllCategoryByBrand(this ICatalogs operations, string brand, string gender)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogs)s).GetAllCategoryByBrandAsync(brand, gender);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='gender'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<CategoryList> GetAllCategoryByBrandAsync(this ICatalogs operations, string brand, string gender, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.CategoryList> result = await operations.GetAllCategoryByBrandWithOperationResponseAsync(brand, gender, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='gender'>
        /// Required.
        /// </param>
        public static CollectionList GetAllCollectionByBrand(this ICatalogs operations, string brand, string gender)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogs)s).GetAllCollectionByBrandAsync(brand, gender);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='gender'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<CollectionList> GetAllCollectionByBrandAsync(this ICatalogs operations, string brand, string gender, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.CollectionList> result = await operations.GetAllCollectionByBrandWithOperationResponseAsync(brand, gender, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        public static ColorItemList GetAllColorByBrand(this ICatalogs operations, string brand)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogs)s).GetAllColorByBrandAsync(brand);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ColorItemList> GetAllColorByBrandAsync(this ICatalogs operations, string brand, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.ColorItemList> result = await operations.GetAllColorByBrandWithOperationResponseAsync(brand, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        public static GenderList GetAllGenderByBrand(this ICatalogs operations, string brand)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogs)s).GetAllGenderByBrandAsync(brand);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<GenderList> GetAllGenderByBrandAsync(this ICatalogs operations, string brand, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.GenderList> result = await operations.GetAllGenderByBrandWithOperationResponseAsync(brand, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        public static FitTypeList GetAllPantFitTypeByBrand(this ICatalogs operations, string brand)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogs)s).GetAllPantFitTypeByBrandAsync(brand);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<FitTypeList> GetAllPantFitTypeByBrandAsync(this ICatalogs operations, string brand, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.FitTypeList> result = await operations.GetAllPantFitTypeByBrandWithOperationResponseAsync(brand, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        public static SizeItemList GetAllSizeByBrand(this ICatalogs operations, string brand)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogs)s).GetAllSizeByBrandAsync(brand);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<SizeItemList> GetAllSizeByBrandAsync(this ICatalogs operations, string brand, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.SizeItemList> result = await operations.GetAllSizeByBrandWithOperationResponseAsync(brand, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='gender'>
        /// Required.
        /// </param>
        public static SizeItemList GetAllSizeByGender(this ICatalogs operations, string gender)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogs)s).GetAllSizeByGenderAsync(gender);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='gender'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<SizeItemList> GetAllSizeByGenderAsync(this ICatalogs operations, string gender, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.SizeItemList> result = await operations.GetAllSizeByGenderWithOperationResponseAsync(gender, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        public static SortByList GetAllSortByByBrand(this ICatalogs operations, string brand)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogs)s).GetAllSortByByBrandAsync(brand);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<SortByList> GetAllSortByByBrandAsync(this ICatalogs operations, string brand, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.SortByList> result = await operations.GetAllSortByByBrandWithOperationResponseAsync(brand, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='gender'>
        /// Required.
        /// </param>
        /// <param name='collection'>
        /// Optional.
        /// </param>
        /// <param name='category'>
        /// Optional.
        /// </param>
        /// <param name='isnew'>
        /// Optional.
        /// </param>
        /// <param name='fittype'>
        /// Optional.
        /// </param>
        /// <param name='size'>
        /// Optional.
        /// </param>
        /// <param name='color'>
        /// Optional.
        /// </param>
        /// <param name='sort'>
        /// Optional.
        /// </param>
        /// <param name='page'>
        /// Optional.
        /// </param>
        /// <param name='pagesize'>
        /// Optional.
        /// </param>
        public static ProductCatalogList GetProductsAsync(this ICatalogs operations, string brand, string gender, string collection = null, string category = null, string isnew = null, IList<string> fittype = null, IList<string> size = null, IList<string> color = null, string sort = null, int? page = null, int? pagesize = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogs)s).GetProductsAsyncAsync(brand, gender, collection, category, isnew, fittype, size, color, sort, page, pagesize);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='gender'>
        /// Required.
        /// </param>
        /// <param name='collection'>
        /// Optional.
        /// </param>
        /// <param name='category'>
        /// Optional.
        /// </param>
        /// <param name='isnew'>
        /// Optional.
        /// </param>
        /// <param name='fittype'>
        /// Optional.
        /// </param>
        /// <param name='size'>
        /// Optional.
        /// </param>
        /// <param name='color'>
        /// Optional.
        /// </param>
        /// <param name='sort'>
        /// Optional.
        /// </param>
        /// <param name='page'>
        /// Optional.
        /// </param>
        /// <param name='pagesize'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ProductCatalogList> GetProductsAsyncAsync(this ICatalogs operations, string brand, string gender, string collection = null, string category = null, string isnew = null, IList<string> fittype = null, IList<string> size = null, IList<string> color = null, string sort = null, int? page = null, int? pagesize = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.ProductCatalogList> result = await operations.GetProductsAsyncWithOperationResponseAsync(brand, gender, collection, category, isnew, fittype, size, color, sort, page, pagesize, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='keyword'>
        /// Required.
        /// </param>
        /// <param name='page'>
        /// Optional.
        /// </param>
        /// <param name='pagesize'>
        /// Optional.
        /// </param>
        public static SearchResultList Search(this ICatalogs operations, string brand, string keyword, int? page = null, int? pagesize = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogs)s).SearchAsync(brand, keyword, page, pagesize);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ICatalogs.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='keyword'>
        /// Required.
        /// </param>
        /// <param name='page'>
        /// Optional.
        /// </param>
        /// <param name='pagesize'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<SearchResultList> SearchAsync(this ICatalogs operations, string brand, string keyword, int? page = null, int? pagesize = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.SearchResultList> result = await operations.SearchWithOperationResponseAsync(brand, keyword, page, pagesize, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
