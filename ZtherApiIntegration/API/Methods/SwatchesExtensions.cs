// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using ZtherApiIntegration.API;
using ZtherApiIntegration.API.Models;

namespace ZtherApiIntegration.API
{
    public static partial class SwatchesExtensions
    {
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ISwatches.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='sortby'>
        /// Optional.
        /// </param>
        public static SwatchList GetAllPrintByBrand(this ISwatches operations, string brand, string sortby = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISwatches)s).GetAllPrintByBrandAsync(brand, sortby);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ISwatches.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='sortby'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<SwatchList> GetAllPrintByBrandAsync(this ISwatches operations, string brand, string sortby = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.SwatchList> result = await operations.GetAllPrintByBrandWithOperationResponseAsync(brand, sortby, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ISwatches.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='sortby'>
        /// Optional.
        /// </param>
        public static SwatchList GetAllSolidByBrand(this ISwatches operations, string brand, string sortby = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISwatches)s).GetAllSolidByBrandAsync(brand, sortby);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ISwatches.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='sortby'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<SwatchList> GetAllSolidByBrandAsync(this ISwatches operations, string brand, string sortby = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.SwatchList> result = await operations.GetAllSolidByBrandWithOperationResponseAsync(brand, sortby, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ISwatches.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='color'>
        /// Required.
        /// </param>
        public static ProductLineArtList GetPrintsByBrandAndColor(this ISwatches operations, string brand, string color)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISwatches)s).GetPrintsByBrandAndColorAsync(brand, color);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ISwatches.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='color'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ProductLineArtList> GetPrintsByBrandAndColorAsync(this ISwatches operations, string brand, string color, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.ProductLineArtList> result = await operations.GetPrintsByBrandAndColorWithOperationResponseAsync(brand, color, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ISwatches.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='color'>
        /// Required.
        /// </param>
        public static ProductLineArtList GetSolidsByBrandAndColor(this ISwatches operations, string brand, string color)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISwatches)s).GetSolidsByBrandAndColorAsync(brand, color);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.ISwatches.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='color'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ProductLineArtList> GetSolidsByBrandAndColorAsync(this ISwatches operations, string brand, string color, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.ProductLineArtList> result = await operations.GetSolidsByBrandAndColorWithOperationResponseAsync(brand, color, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
