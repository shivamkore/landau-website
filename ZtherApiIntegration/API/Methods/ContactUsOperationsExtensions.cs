// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using ZtherApiIntegration.API;
using ZtherApiIntegration.API.Models;

namespace ZtherApiIntegration.API
{
    public static partial class ContactUsOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the
        /// ZtherApiIntegration.API.IContactUsOperations.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='model'>
        /// Required.
        /// </param>
        public static string CreateContactUs(this IContactUsOperations operations, string brand, ContactUs model)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IContactUsOperations)s).CreateContactUsAsync(brand, model);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// ZtherApiIntegration.API.IContactUsOperations.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='model'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> CreateContactUsAsync(this IContactUsOperations operations, string brand, ContactUs model, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.CreateContactUsWithOperationResponseAsync(brand, model, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// ZtherApiIntegration.API.IContactUsOperations.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        public static ContactUsList GetAllContactUs(this IContactUsOperations operations, string brand)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IContactUsOperations)s).GetAllContactUsAsync(brand);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// ZtherApiIntegration.API.IContactUsOperations.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ContactUsList> GetAllContactUsAsync(this IContactUsOperations operations, string brand, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.ContactUsList> result = await operations.GetAllContactUsWithOperationResponseAsync(brand, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// ZtherApiIntegration.API.IContactUsOperations.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static ContactUs GetContactUsById(this IContactUsOperations operations, string brand, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IContactUsOperations)s).GetContactUsByIdAsync(brand, id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// ZtherApiIntegration.API.IContactUsOperations.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ContactUs> GetContactUsByIdAsync(this IContactUsOperations operations, string brand, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.ContactUs> result = await operations.GetContactUsByIdWithOperationResponseAsync(brand, id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// ZtherApiIntegration.API.IContactUsOperations.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static string RemoveContactUs(this IContactUsOperations operations, string brand, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IContactUsOperations)s).RemoveContactUsAsync(brand, id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// ZtherApiIntegration.API.IContactUsOperations.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> RemoveContactUsAsync(this IContactUsOperations operations, string brand, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.RemoveContactUsWithOperationResponseAsync(brand, id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
