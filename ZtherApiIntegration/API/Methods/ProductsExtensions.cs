// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using ZtherApiIntegration.API;
using ZtherApiIntegration.API.Models;

namespace ZtherApiIntegration.API
{
    public static partial class ProductsExtensions
    {
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='brand'>
        /// Optional.
        /// </param>
        /// <param name='page'>
        /// Optional.
        /// </param>
        /// <param name='pagesize'>
        /// Optional.
        /// </param>
        public static ProductList GetAll(this IProducts operations, string brand = null, int? page = null, int? pagesize = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProducts)s).GetAllAsync(brand, page, pagesize);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='brand'>
        /// Optional.
        /// </param>
        /// <param name='page'>
        /// Optional.
        /// </param>
        /// <param name='pagesize'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ProductList> GetAllAsync(this IProducts operations, string brand = null, int? page = null, int? pagesize = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.ProductList> result = await operations.GetAllWithOperationResponseAsync(brand, page, pagesize, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        public static BaseModelProduct GetAllByProductCodes(this IProducts operations, IList<string> code)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProducts)s).GetAllByProductCodesAsync(code);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<BaseModelProduct> GetAllByProductCodesAsync(this IProducts operations, IList<string> code, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.BaseModelProduct> result = await operations.GetAllByProductCodesWithOperationResponseAsync(code, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        public static ColorList GetAllColorByProduct(this IProducts operations, string code)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProducts)s).GetAllColorByProductAsync(code);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ColorList> GetAllColorByProductAsync(this IProducts operations, string code, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.ColorList> result = await operations.GetAllColorByProductWithOperationResponseAsync(code, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='size'>
        /// Required.
        /// </param>
        public static ColorList GetAllColorByProductAndSize(this IProducts operations, string code, string size)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProducts)s).GetAllColorByProductAndSizeAsync(code, size);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='size'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ColorList> GetAllColorByProductAndSizeAsync(this IProducts operations, string code, string size, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.ColorList> result = await operations.GetAllColorByProductAndSizeWithOperationResponseAsync(code, size, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='sizeCategory'>
        /// Required.
        /// </param>
        public static ColorList GetAllColorByProductAndSizeCategory(this IProducts operations, string code, string sizeCategory)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProducts)s).GetAllColorByProductAndSizeCategoryAsync(code, sizeCategory);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='sizeCategory'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ColorList> GetAllColorByProductAndSizeCategoryAsync(this IProducts operations, string code, string sizeCategory, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.ColorList> result = await operations.GetAllColorByProductAndSizeCategoryWithOperationResponseAsync(code, sizeCategory, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        public static CoordinateList GetAllCoordinateByProduct(this IProducts operations, string code)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProducts)s).GetAllCoordinateByProductAsync(code);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<CoordinateList> GetAllCoordinateByProductAsync(this IProducts operations, string code, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.CoordinateList> result = await operations.GetAllCoordinateByProductWithOperationResponseAsync(code, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        public static SizeList GetAllSizeByProduct(this IProducts operations, string code)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProducts)s).GetAllSizeByProductAsync(code);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<SizeList> GetAllSizeByProductAsync(this IProducts operations, string code, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.SizeList> result = await operations.GetAllSizeByProductWithOperationResponseAsync(code, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='color'>
        /// Required.
        /// </param>
        public static SizeList GetAllSizeByProductAndColor(this IProducts operations, string code, string color)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProducts)s).GetAllSizeByProductAndColorAsync(code, color);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='color'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<SizeList> GetAllSizeByProductAndColorAsync(this IProducts operations, string code, string color, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.SizeList> result = await operations.GetAllSizeByProductAndColorWithOperationResponseAsync(code, color, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        public static VideoList GetAllVideoByProduct(this IProducts operations, string code)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProducts)s).GetAllVideoByProductAsync(code);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<VideoList> GetAllVideoByProductAsync(this IProducts operations, string code, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.VideoList> result = await operations.GetAllVideoByProductWithOperationResponseAsync(code, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        public static Product GetByProduct(this IProducts operations, string code)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProducts)s).GetByProductAsync(code);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Product> GetByProductAsync(this IProducts operations, string code, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.Product> result = await operations.GetByProductWithOperationResponseAsync(code, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='keyword'>
        /// Required.
        /// </param>
        /// <param name='page'>
        /// Optional.
        /// </param>
        /// <param name='pagesize'>
        /// Optional.
        /// </param>
        public static ProductList Search(this IProducts operations, string keyword, int? page = null, int? pagesize = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProducts)s).SearchAsync(keyword, page, pagesize);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='keyword'>
        /// Required.
        /// </param>
        /// <param name='page'>
        /// Optional.
        /// </param>
        /// <param name='pagesize'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ProductList> SearchAsync(this IProducts operations, string keyword, int? page = null, int? pagesize = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.ProductList> result = await operations.SearchWithOperationResponseAsync(keyword, page, pagesize, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='model'>
        /// Required.
        /// </param>
        public static CoordinateList Update(this IProducts operations, string code, ProductUpdate model)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProducts)s).UpdateAsync(code, model);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProducts.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='model'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<CoordinateList> UpdateAsync(this IProducts operations, string code, ProductUpdate model, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.CoordinateList> result = await operations.UpdateWithOperationResponseAsync(code, model, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
