// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using ZtherApiIntegration.API;
using ZtherApiIntegration.API.Models;

namespace ZtherApiIntegration.API
{
    public static partial class RetailersExtensions
    {
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IRetailers.
        /// </param>
        /// <param name='city'>
        /// Required.
        /// </param>
        /// <param name='state'>
        /// Required.
        /// </param>
        /// <param name='diamond'>
        /// Optional.
        /// </param>
        /// <param name='radius'>
        /// Optional.
        /// </param>
        /// <param name='page'>
        /// Optional.
        /// </param>
        /// <param name='pagesize'>
        /// Optional.
        /// </param>
        public static RetailerList FindByCityAndState(this IRetailers operations, string city, string state, bool? diamond = null, double? radius = null, int? page = null, int? pagesize = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRetailers)s).FindByCityAndStateAsync(city, state, diamond, radius, page, pagesize);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IRetailers.
        /// </param>
        /// <param name='city'>
        /// Required.
        /// </param>
        /// <param name='state'>
        /// Required.
        /// </param>
        /// <param name='diamond'>
        /// Optional.
        /// </param>
        /// <param name='radius'>
        /// Optional.
        /// </param>
        /// <param name='page'>
        /// Optional.
        /// </param>
        /// <param name='pagesize'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<RetailerList> FindByCityAndStateAsync(this IRetailers operations, string city, string state, bool? diamond = null, double? radius = null, int? page = null, int? pagesize = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.RetailerList> result = await operations.FindByCityAndStateWithOperationResponseAsync(city, state, diamond, radius, page, pagesize, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IRetailers.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='country'>
        /// Required.
        /// </param>
        /// <param name='page'>
        /// Optional.
        /// </param>
        /// <param name='pagesize'>
        /// Optional.
        /// </param>
        public static RetailerList FindByCountry(this IRetailers operations, string brand, string country, int? page = null, int? pagesize = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRetailers)s).FindByCountryAsync(brand, country, page, pagesize);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IRetailers.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='country'>
        /// Required.
        /// </param>
        /// <param name='page'>
        /// Optional.
        /// </param>
        /// <param name='pagesize'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<RetailerList> FindByCountryAsync(this IRetailers operations, string brand, string country, int? page = null, int? pagesize = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.RetailerList> result = await operations.FindByCountryWithOperationResponseAsync(brand, country, page, pagesize, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IRetailers.
        /// </param>
        /// <param name='zipcode'>
        /// Required.
        /// </param>
        /// <param name='diamond'>
        /// Optional.
        /// </param>
        /// <param name='radius'>
        /// Optional.
        /// </param>
        /// <param name='page'>
        /// Optional.
        /// </param>
        /// <param name='pagesize'>
        /// Optional.
        /// </param>
        public static RetailerList FindByZipcode(this IRetailers operations, string zipcode, bool? diamond = null, double? radius = null, int? page = null, int? pagesize = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRetailers)s).FindByZipcodeAsync(zipcode, diamond, radius, page, pagesize);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IRetailers.
        /// </param>
        /// <param name='zipcode'>
        /// Required.
        /// </param>
        /// <param name='diamond'>
        /// Optional.
        /// </param>
        /// <param name='radius'>
        /// Optional.
        /// </param>
        /// <param name='page'>
        /// Optional.
        /// </param>
        /// <param name='pagesize'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<RetailerList> FindByZipcodeAsync(this IRetailers operations, string zipcode, bool? diamond = null, double? radius = null, int? page = null, int? pagesize = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.RetailerList> result = await operations.FindByZipcodeWithOperationResponseAsync(zipcode, diamond, radius, page, pagesize, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IRetailers.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='partial'>
        /// Optional.
        /// </param>
        public static BaseModelRetailer GetAllOnlineByBrand(this IRetailers operations, string code, bool? partial = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRetailers)s).GetAllOnlineByBrandAsync(code, partial);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IRetailers.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='partial'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<BaseModelRetailer> GetAllOnlineByBrandAsync(this IRetailers operations, string code, bool? partial = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.BaseModelRetailer> result = await operations.GetAllOnlineByBrandWithOperationResponseAsync(code, partial, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IRetailers.
        /// </param>
        public static BaseModelRetailer GetAllPremier(this IRetailers operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRetailers)s).GetAllPremierAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IRetailers.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<BaseModelRetailer> GetAllPremierAsync(this IRetailers operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.BaseModelRetailer> result = await operations.GetAllPremierWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IRetailers.
        /// </param>
        /// <param name='account'>
        /// Required.
        /// </param>
        /// <param name='country'>
        /// Optional.
        /// </param>
        public static Retailer GetByAccount(this IRetailers operations, string account, string country = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRetailers)s).GetByAccountAsync(account, country);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IRetailers.
        /// </param>
        /// <param name='account'>
        /// Required.
        /// </param>
        /// <param name='country'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Retailer> GetByAccountAsync(this IRetailers operations, string account, string country = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.Retailer> result = await operations.GetByAccountWithOperationResponseAsync(account, country, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }

        /// <param name='operations'>
        /// Reference to the ConsoleApp.IRetailers.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        public static BaseModelRetailerLink GetAllBuyNow(this IRetailers operations, string brand, string code)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((IRetailers)s).GetAllBuyNowAsync(brand, code);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// Reference to the ConsoleApp.IRetailers.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<BaseModelRetailerLink> GetAllBuyNowAsync(this IRetailers operations, string brand, string code, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.BaseModelRetailerLink> result = await operations.GetAllBuyNowWithOperationResponseAsync(brand, code, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }

        /// <param name='operations'>
        /// Reference to the ConsoleApp.IRetailers.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        public static BaseModelRetailerLink GetAllWhereToBuy(this IRetailers operations, string brand)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((IRetailers)s).GetAllWhereToBuyAsync(brand);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// Reference to the ConsoleApp.IRetailers.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<BaseModelRetailerLink> GetAllWhereToBuyAsync(this IRetailers operations, string brand, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.BaseModelRetailerLink> result = await operations.GetAllWhereToBuyWithOperationResponseAsync(brand, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
