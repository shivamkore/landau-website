// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using ZtherApiIntegration.API;
using ZtherApiIntegration.API.Models;

namespace ZtherApiIntegration.API
{
    public static partial class ProductImagesExtensions
    {
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        public static string CreateAsync(this IProductImages operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductImages)s).CreateAsyncAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> CreateAsyncAsync(this IProductImages operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.CreateAsyncWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='primary'>
        /// Optional.
        /// </param>
        public static ImageList GetAllByProduct(this IProductImages operations, string code, string primary = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductImages)s).GetAllByProductAsync(code, primary);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='primary'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ImageList> GetAllByProductAsync(this IProductImages operations, string code, string primary = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.ImageList> result = await operations.GetAllByProductWithOperationResponseAsync(code, primary, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='color'>
        /// Required.
        /// </param>
        public static ImageList GetAllByProductAndColor(this IProductImages operations, string code, string color)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductImages)s).GetAllByProductAndColorAsync(code, color);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='color'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ImageList> GetAllByProductAndColorAsync(this IProductImages operations, string code, string color, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.ImageList> result = await operations.GetAllByProductAndColorWithOperationResponseAsync(code, color, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static ProductImage GetById(this IProductImages operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductImages)s).GetByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ProductImage> GetByIdAsync(this IProductImages operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.ProductImage> result = await operations.GetByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Image GetByProductAndId(this IProductImages operations, string code, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductImages)s).GetByProductAndIdAsync(code, id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Image> GetByProductAndIdAsync(this IProductImages operations, string code, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.Image> result = await operations.GetByProductAndIdWithOperationResponseAsync(code, id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        public static Image GetPrimaryImageByProduct(this IProductImages operations, string code)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductImages)s).GetPrimaryImageByProductAsync(code);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Image> GetPrimaryImageByProductAsync(this IProductImages operations, string code, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.Image> result = await operations.GetPrimaryImageByProductWithOperationResponseAsync(code, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static string RemoveAsync(this IProductImages operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductImages)s).RemoveAsyncAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> RemoveAsyncAsync(this IProductImages operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.RemoveAsyncWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        public static string SetAsPrimaryAsync(this IProductImages operations, int id, string code)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductImages)s).SetAsPrimaryAsyncAsync(id, code);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> SetAsPrimaryAsyncAsync(this IProductImages operations, int id, string code, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.SetAsPrimaryAsyncWithOperationResponseAsync(id, code, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='model'>
        /// Required.
        /// </param>
        public static string UpdateAsync(this IProductImages operations, int id, ProductImageUpdate model)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductImages)s).UpdateAsyncAsync(id, model);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductImages.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='model'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> UpdateAsyncAsync(this IProductImages operations, int id, ProductImageUpdate model, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.UpdateAsyncWithOperationResponseAsync(id, model, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
