// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using ZtherApiIntegration.API;
using ZtherApiIntegration.API.Models;

namespace ZtherApiIntegration.API
{
    public static partial class BannersExtensions
    {
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IBanners.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        public static TileList GetAllPrintBannerByBrandAsync(this IBanners operations, string brand)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBanners)s).GetAllPrintBannerByBrandAsyncAsync(brand);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IBanners.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<TileList> GetAllPrintBannerByBrandAsyncAsync(this IBanners operations, string brand, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.TileList> result = await operations.GetAllPrintBannerByBrandAsyncWithOperationResponseAsync(brand, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IBanners.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        public static SeasonalList GetAllSeasonalByBrandAsync(this IBanners operations, string brand)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBanners)s).GetAllSeasonalByBrandAsyncAsync(brand);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IBanners.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<SeasonalList> GetAllSeasonalByBrandAsyncAsync(this IBanners operations, string brand, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.SeasonalList> result = await operations.GetAllSeasonalByBrandAsyncWithOperationResponseAsync(brand, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IBanners.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        public static SliderList GetAllSliderByBrandAsync(this IBanners operations, string brand)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBanners)s).GetAllSliderByBrandAsyncAsync(brand);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IBanners.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<SliderList> GetAllSliderByBrandAsyncAsync(this IBanners operations, string brand, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.SliderList> result = await operations.GetAllSliderByBrandAsyncWithOperationResponseAsync(brand, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IBanners.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        public static TileList GetAllTileByBrandAsync(this IBanners operations, string brand)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBanners)s).GetAllTileByBrandAsyncAsync(brand);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IBanners.
        /// </param>
        /// <param name='brand'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<TileList> GetAllTileByBrandAsyncAsync(this IBanners operations, string brand, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.TileList> result = await operations.GetAllTileByBrandAsyncWithOperationResponseAsync(brand, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
