// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using ZtherApiIntegration.API;
using ZtherApiIntegration.API.Models;

namespace ZtherApiIntegration.API
{
    public static partial class ColorsExtensions
    {
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IColors.
        /// </param>
        /// <param name='type'>
        /// Required.
        /// </param>
        public static ColorList GetAllByGroupTypeAsync(this IColors operations, string type)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IColors)s).GetAllByGroupTypeAsyncAsync(type);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IColors.
        /// </param>
        /// <param name='type'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ColorList> GetAllByGroupTypeAsyncAsync(this IColors operations, string type, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.ColorList> result = await operations.GetAllByGroupTypeAsyncWithOperationResponseAsync(type, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IColors.
        /// </param>
        /// <param name='model'>
        /// Required.
        /// </param>
        public static string UpdateAsync(this IColors operations, ColorUpdate model)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IColors)s).UpdateAsyncAsync(model);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IColors.
        /// </param>
        /// <param name='model'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> UpdateAsyncAsync(this IColors operations, ColorUpdate model, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.UpdateAsyncWithOperationResponseAsync(model, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
