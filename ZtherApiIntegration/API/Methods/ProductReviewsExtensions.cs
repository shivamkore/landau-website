// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using ZtherApiIntegration.API;
using ZtherApiIntegration.API.Models;

namespace ZtherApiIntegration.API
{
    public static partial class ProductReviewsExtensions
    {
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductReviews.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='model'>
        /// Required.
        /// </param>
        public static string Create(this IProductReviews operations, string code, ProductReviewCreate model)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductReviews)s).CreateAsync(code, model);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductReviews.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='model'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> CreateAsync(this IProductReviews operations, string code, ProductReviewCreate model, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.CreateWithOperationResponseAsync(code, model, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductReviews.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='page'>
        /// Optional.
        /// </param>
        /// <param name='pagesize'>
        /// Optional.
        /// </param>
        public static ProductReviewList GetAllByProduct(this IProductReviews operations, string code, int? page = null, int? pagesize = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductReviews)s).GetAllByProductAsync(code, page, pagesize);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductReviews.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='page'>
        /// Optional.
        /// </param>
        /// <param name='pagesize'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ProductReviewList> GetAllByProductAsync(this IProductReviews operations, string code, int? page = null, int? pagesize = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.ProductReviewList> result = await operations.GetAllByProductWithOperationResponseAsync(code, page, pagesize, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductReviews.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static ProductReview GetByProductAndId(this IProductReviews operations, string code, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductReviews)s).GetByProductAndIdAsync(code, id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductReviews.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ProductReview> GetByProductAndIdAsync(this IProductReviews operations, string code, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ZtherApiIntegration.API.Models.ProductReview> result = await operations.GetByProductAndIdWithOperationResponseAsync(code, id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductReviews.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='model'>
        /// Required.
        /// </param>
        public static string Update(this IProductReviews operations, string code, ProductReviewUpdate model)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductReviews)s).UpdateAsync(code, model);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ZtherApiIntegration.API.IProductReviews.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='model'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> UpdateAsync(this IProductReviews operations, string code, ProductReviewUpdate model, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.UpdateWithOperationResponseAsync(code, model, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
