// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;

namespace ZtherApiIntegration.API.Models
{
    public partial class EmailFavorite
    {
        private string _brand;
        
        /// <summary>
        /// Required.
        /// </summary>
        public string Brand
        {
            get { return this._brand; }
            set { this._brand = value; }
        }
        
        private DateTimeOffset? _entryDate;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public DateTimeOffset? EntryDate
        {
            get { return this._entryDate; }
            set { this._entryDate = value; }
        }
        
        private int? _id;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? ID
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _message;
        
        /// <summary>
        /// Required.
        /// </summary>
        public string Message
        {
            get { return this._message; }
            set { this._message = value; }
        }
        
        private IList<string> _products;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IList<string> Products
        {
            get { return this._products; }
            set { this._products = value; }
        }
        
        private string _recipientEmail;
        
        /// <summary>
        /// Required.
        /// </summary>
        public string RecipientEmail
        {
            get { return this._recipientEmail; }
            set { this._recipientEmail = value; }
        }
        
        private string _recipientName;
        
        /// <summary>
        /// Required.
        /// </summary>
        public string RecipientName
        {
            get { return this._recipientName; }
            set { this._recipientName = value; }
        }
        
        private string _senderName;
        
        /// <summary>
        /// Required.
        /// </summary>
        public string SenderName
        {
            get { return this._senderName; }
            set { this._senderName = value; }
        }
        
        private string _subject;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Subject
        {
            get { return this._subject; }
            set { this._subject = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the EmailFavorite class.
        /// </summary>
        public EmailFavorite()
        {
            this.Products = new LazyList<string>();
        }
        
        /// <summary>
        /// Serialize the object
        /// </summary>
        /// <returns>
        /// Returns the json model for the type EmailFavorite
        /// </returns>
        public virtual JToken SerializeJson(JToken outputObject)
        {
            if (outputObject == null)
            {
                outputObject = new JObject();
            }
            if (this.Brand == null)
            {
                throw new ArgumentNullException("Brand");
            }
            if (this.Message == null)
            {
                throw new ArgumentNullException("Message");
            }
            if (this.RecipientEmail == null)
            {
                throw new ArgumentNullException("RecipientEmail");
            }
            if (this.RecipientName == null)
            {
                throw new ArgumentNullException("RecipientName");
            }
            if (this.SenderName == null)
            {
                throw new ArgumentNullException("SenderName");
            }
            if (this.Brand != null)
            {
                outputObject["brand"] = this.Brand;
            }
            if (this.EntryDate != null)
            {
                outputObject["entryDate"] = this.EntryDate.Value;
            }
            if (this.ID != null)
            {
                outputObject["id"] = this.ID.Value;
            }
            if (this.Message != null)
            {
                outputObject["message"] = this.Message;
            }
            JArray productsSequence = null;
            if (this.Products != null)
            {
                if (this.Products is ILazyCollection<string> == false || ((ILazyCollection<string>)this.Products).IsInitialized)
                {
                    productsSequence = new JArray();
                    outputObject["products"] = productsSequence;
                    foreach (string productsItem in this.Products)
                    {
                        if (productsItem != null)
                        {
                            productsSequence.Add(productsItem);
                        }
                    }
                }
            }
            if (this.RecipientEmail != null)
            {
                outputObject["recipientEmail"] = this.RecipientEmail;
            }
            if (this.RecipientName != null)
            {
                outputObject["recipientName"] = this.RecipientName;
            }
            if (this.SenderName != null)
            {
                outputObject["senderName"] = this.SenderName;
            }
            if (this.Subject != null)
            {
                outputObject["subject"] = this.Subject;
            }
            return outputObject;
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken brandValue = inputObject["brand"];
                if (brandValue != null && brandValue.Type != JTokenType.Null)
                {
                    this.Brand = ((string)brandValue);
                }
                JToken entryDateValue = inputObject["entryDate"];
                if (entryDateValue != null && entryDateValue.Type != JTokenType.Null)
                {
                    this.EntryDate = ((DateTimeOffset)entryDateValue);
                }
                JToken idValue = inputObject["id"];
                if (idValue != null && idValue.Type != JTokenType.Null)
                {
                    this.ID = ((int)idValue);
                }
                JToken messageValue = inputObject["message"];
                if (messageValue != null && messageValue.Type != JTokenType.Null)
                {
                    this.Message = ((string)messageValue);
                }
                JToken productsSequence = ((JToken)inputObject["products"]);
                if (productsSequence != null && productsSequence.Type != JTokenType.Null)
                {
                    foreach (JToken productsValue in ((JArray)productsSequence))
                    {
                        this.Products.Add(((string)productsValue));
                    }
                }
                JToken recipientEmailValue = inputObject["recipientEmail"];
                if (recipientEmailValue != null && recipientEmailValue.Type != JTokenType.Null)
                {
                    this.RecipientEmail = ((string)recipientEmailValue);
                }
                JToken recipientNameValue = inputObject["recipientName"];
                if (recipientNameValue != null && recipientNameValue.Type != JTokenType.Null)
                {
                    this.RecipientName = ((string)recipientNameValue);
                }
                JToken senderNameValue = inputObject["senderName"];
                if (senderNameValue != null && senderNameValue.Type != JTokenType.Null)
                {
                    this.SenderName = ((string)senderNameValue);
                }
                JToken subjectValue = inputObject["subject"];
                if (subjectValue != null && subjectValue.Type != JTokenType.Null)
                {
                    this.Subject = ((string)subjectValue);
                }
            }
        }
    }
}
