@using ZtherApiIntegration.Models.Detail
@model DetailModel

<div class="category_container">
    <div class="type_container">
        @for (int i = 0; i < Model.ColorsAndSizes.ProductCategorySizes.Count; i++)
        {
            var aSizeCategory = Model.ColorsAndSizes.ProductCategorySizes[i];
            <a option="@(i+1)" class=@(i==0?"selected":"")>@aSizeCategory</a>
        }
    </div>
    <div class="slider">
        <div class="pointer"></div>
        <div class="bar"></div>
    </div>
</div>
<div class="category_options_wrapper">
    @for (int i = 0; i < Model.ColorsAndSizes.ProductCategorySizes.Count; i++)
    {
        var aSizeCategory = Model.ColorsAndSizes.ProductCategorySizes[i];
        var isDefaultCategory = aSizeCategory == Model.ProductDetail.DefaultCategorySize;
        <div option="@(i+1)" class='category_options_container@( isDefaultCategory ? " active" : " stacked")'>
            <div class="color_options_container">
                @{
                    if (Model.SelectedColor == null)
                    {
                        Model.SelectedColor = Model.ProductDetail.DefaultColorCode != null && isDefaultCategory != null ? Model.ColorsAndSizes.AvailableColorsPerSizeCategory[aSizeCategory].Where(c => c.ColorCode.ToUpper() == Model.ProductDetail.DefaultColorCode.ToUpper()).FirstOrDefault() : new ProductColorModel();

                        if (Model.SelectedColor == null)
                        {
                            Model.SelectedColor = new ProductColorModel();
                            Model.SelectedColor.ColorCode = Model.ProductDetail.DefaultColorCode;
                            Model.SelectedColor.ColorName = string.Empty;
                        }
                    }
                }
                <div class="text">@(Model.ProductDetail.DefaultColorCode != null ? string.Format("Color - {0} ({1})", Model.SelectedColor.ColorName, Model.SelectedColor.ColorCode) : "") </div>
                <div class="color_swatches">
                    @if (Model.ColorsAndSizes.AvailableColorsPerSizeCategory.Keys.Count > 0)
                    {
                        var j = 0;
                        foreach (var aColor in Model.ColorsAndSizes.AvailableColorsPerSizeCategory[aSizeCategory])
                        {

                            <div class='swatch_container@((aColor.ColorCode.ToUpper() == (Model.SelectedColor.ColorCode ?? "").ToUpper() ) ? " selected" : "")' data-color-code="@aColor.ColorCode" data-color-hex="@aColor.PrimaryHex" data-color-name="@aColor.ColorName" data-color-url="@aColor.ColorImageUrl" data-swatch-type="@aColor.SwatchType">
                                <div class="select_circle"></div>
                                <div class="swatch">
                                    @if (string.IsNullOrEmpty(aColor.ColorImageUrl))
                                    {
                                        <div class="background" style="background-color:#@aColor.PrimaryHex;"></div>
                                    }
                                    else
                                    {
                                        <div class="background" style="background-image:url('@aColor.ColorImageUrl');"></div>
                                    }
                                </div>
                            </div>
                                    j++;
                        }
                    }
                </div>

                @{
                    var colorsCount = Model.ColorsAndSizes.AvailableColorsPerSizeCategory[aSizeCategory].Count;
                    var extraClass = "";

                    switch (colorsCount)
                    {
                        case 6:
                            extraClass = "mobile";
                            break;
                        case 7:
                            extraClass = "tablet";
                            break;
                        case 8:
                        case 9:
                            extraClass = "laptop";
                            break;
                        default:
                            extraClass = "desktop";
                            break;

                    }

                }

                @if (colorsCount > 5)
                {
                    <span class="more_colors @extraClass">
                        <span>See More Colors</span>
                        <span class="less">See Less Colors</span>
                    </span>
                }
            </div>
            <div class="sizes_container">
                <div class="title">Available Sizes</div>
                <div class="size_options_container">
                    @Html.Partial("~/Views/Partials/Detail/_SizesPartial.cshtml", Model.ColorsAndSizes.Sizes)
                </div>
                <div class="measurement" onclick="measureChart();">Measurement Chart</div>
            </div>
        </div>
    }

</div>
